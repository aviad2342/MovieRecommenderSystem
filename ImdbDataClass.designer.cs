#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieRecommenderSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IMDB")]
	public partial class ImdbDataClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertMovieGenre(MovieGenre instance);
    partial void UpdateMovieGenre(MovieGenre instance);
    partial void DeleteMovieGenre(MovieGenre instance);
    partial void InsertTwitterUser(TwitterUser instance);
    partial void UpdateTwitterUser(TwitterUser instance);
    partial void DeleteTwitterUser(TwitterUser instance);
    partial void InsertUserMovieRank(UserMovieRank instance);
    partial void UpdateUserMovieRank(UserMovieRank instance);
    partial void DeleteUserMovieRank(UserMovieRank instance);
    #endregion
		
		public ImdbDataClassDataContext() : 
				base(global::MovieRecommenderSystem.Properties.Settings.Default.IMDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ImdbDataClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImdbDataClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImdbDataClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImdbDataClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<MovieGenre> MovieGenres
		{
			get
			{
				return this.GetTable<MovieGenre>();
			}
		}
		
		public System.Data.Linq.Table<TwitterUser> TwitterUsers
		{
			get
			{
				return this.GetTable<TwitterUser>();
			}
		}
		
		public System.Data.Linq.Table<UserMovieRank> UserMovieRanks
		{
			get
			{
				return this.GetTable<UserMovieRank>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _genreId;
		
		private string _genreName;
		
		private EntitySet<MovieGenre> _MovieGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngenreIdChanging(int value);
    partial void OngenreIdChanged();
    partial void OngenreNameChanging(string value);
    partial void OngenreNameChanged();
    #endregion
		
		public Genre()
		{
			this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int genreId
		{
			get
			{
				return this._genreId;
			}
			set
			{
				if ((this._genreId != value))
				{
					this.OngenreIdChanging(value);
					this.SendPropertyChanging();
					this._genreId = value;
					this.SendPropertyChanged("genreId");
					this.OngenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreName", DbType="VarChar(50)")]
		public string genreName
		{
			get
			{
				return this._genreName;
			}
			set
			{
				if ((this._genreName != value))
				{
					this.OngenreNameChanging(value);
					this.SendPropertyChanging();
					this._genreName = value;
					this.SendPropertyChanged("genreName");
					this.OngenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MovieGenre", Storage="_MovieGenres", ThisKey="genreId", OtherKey="genreId")]
		public EntitySet<MovieGenre> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieId;
		
		private string _movieName;
		
		private System.Nullable<short> _publishYear;
		
		private EntitySet<MovieGenre> _MovieGenres;
		
		private EntitySet<UserMovieRank> _UserMovieRanks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIdChanging(int value);
    partial void OnmovieIdChanged();
    partial void OnmovieNameChanging(string value);
    partial void OnmovieNameChanged();
    partial void OnpublishYearChanging(System.Nullable<short> value);
    partial void OnpublishYearChanged();
    #endregion
		
		public Movie()
		{
			this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
			this._UserMovieRanks = new EntitySet<UserMovieRank>(new Action<UserMovieRank>(this.attach_UserMovieRanks), new Action<UserMovieRank>(this.detach_UserMovieRanks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int movieId
		{
			get
			{
				return this._movieId;
			}
			set
			{
				if ((this._movieId != value))
				{
					this.OnmovieIdChanging(value);
					this.SendPropertyChanging();
					this._movieId = value;
					this.SendPropertyChanged("movieId");
					this.OnmovieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieName", DbType="VarChar(50)")]
		public string movieName
		{
			get
			{
				return this._movieName;
			}
			set
			{
				if ((this._movieName != value))
				{
					this.OnmovieNameChanging(value);
					this.SendPropertyChanging();
					this._movieName = value;
					this.SendPropertyChanged("movieName");
					this.OnmovieNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishYear", DbType="SmallInt")]
		public System.Nullable<short> publishYear
		{
			get
			{
				return this._publishYear;
			}
			set
			{
				if ((this._publishYear != value))
				{
					this.OnpublishYearChanging(value);
					this.SendPropertyChanging();
					this._publishYear = value;
					this.SendPropertyChanged("publishYear");
					this.OnpublishYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieGenre", Storage="_MovieGenres", ThisKey="movieId", OtherKey="movieId")]
		public EntitySet<MovieGenre> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_UserMovieRank", Storage="_UserMovieRanks", ThisKey="movieId", OtherKey="movieId")]
		public EntitySet<UserMovieRank> UserMovieRanks
		{
			get
			{
				return this._UserMovieRanks;
			}
			set
			{
				this._UserMovieRanks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_UserMovieRanks(UserMovieRank entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_UserMovieRanks(UserMovieRank entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieGenre")]
	public partial class MovieGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieId;
		
		private int _genreId;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIdChanging(int value);
    partial void OnmovieIdChanged();
    partial void OngenreIdChanging(int value);
    partial void OngenreIdChanged();
    #endregion
		
		public MovieGenre()
		{
			this._Genre = default(EntityRef<Genre>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieId
		{
			get
			{
				return this._movieId;
			}
			set
			{
				if ((this._movieId != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIdChanging(value);
					this.SendPropertyChanging();
					this._movieId = value;
					this.SendPropertyChanged("movieId");
					this.OnmovieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int genreId
		{
			get
			{
				return this._genreId;
			}
			set
			{
				if ((this._genreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngenreIdChanging(value);
					this.SendPropertyChanging();
					this._genreId = value;
					this.SendPropertyChanged("genreId");
					this.OngenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MovieGenre", Storage="_Genre", ThisKey="genreId", OtherKey="genreId", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._genreId = value.genreId;
					}
					else
					{
						this._genreId = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieGenre", Storage="_Movie", ThisKey="movieId", OtherKey="movieId", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._movieId = value.movieId;
					}
					else
					{
						this._movieId = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TwitterUser")]
	public partial class TwitterUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _userName;
		
		private System.Nullable<short> _followNum;
		
		private EntitySet<UserMovieRank> _UserMovieRanks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnfollowNumChanging(System.Nullable<short> value);
    partial void OnfollowNumChanged();
    #endregion
		
		public TwitterUser()
		{
			this._UserMovieRanks = new EntitySet<UserMovieRank>(new Action<UserMovieRank>(this.attach_UserMovieRanks), new Action<UserMovieRank>(this.detach_UserMovieRanks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(50)")]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_followNum", DbType="SmallInt")]
		public System.Nullable<short> followNum
		{
			get
			{
				return this._followNum;
			}
			set
			{
				if ((this._followNum != value))
				{
					this.OnfollowNumChanging(value);
					this.SendPropertyChanging();
					this._followNum = value;
					this.SendPropertyChanged("followNum");
					this.OnfollowNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TwitterUser_UserMovieRank", Storage="_UserMovieRanks", ThisKey="userId", OtherKey="userId")]
		public EntitySet<UserMovieRank> UserMovieRanks
		{
			get
			{
				return this._UserMovieRanks;
			}
			set
			{
				this._UserMovieRanks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserMovieRanks(UserMovieRank entity)
		{
			this.SendPropertyChanging();
			entity.TwitterUser = this;
		}
		
		private void detach_UserMovieRanks(UserMovieRank entity)
		{
			this.SendPropertyChanging();
			entity.TwitterUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserMovieRank")]
	public partial class UserMovieRank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _movieId;
		
		private System.Nullable<byte> _movieRank;
		
		private EntityRef<Movie> _Movie;
		
		private EntityRef<TwitterUser> _TwitterUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnmovieIdChanging(int value);
    partial void OnmovieIdChanged();
    partial void OnmovieRankChanging(System.Nullable<byte> value);
    partial void OnmovieRankChanged();
    #endregion
		
		public UserMovieRank()
		{
			this._Movie = default(EntityRef<Movie>);
			this._TwitterUser = default(EntityRef<TwitterUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._TwitterUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieId
		{
			get
			{
				return this._movieId;
			}
			set
			{
				if ((this._movieId != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIdChanging(value);
					this.SendPropertyChanging();
					this._movieId = value;
					this.SendPropertyChanged("movieId");
					this.OnmovieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieRank", DbType="TinyInt")]
		public System.Nullable<byte> movieRank
		{
			get
			{
				return this._movieRank;
			}
			set
			{
				if ((this._movieRank != value))
				{
					this.OnmovieRankChanging(value);
					this.SendPropertyChanging();
					this._movieRank = value;
					this.SendPropertyChanged("movieRank");
					this.OnmovieRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_UserMovieRank", Storage="_Movie", ThisKey="movieId", OtherKey="movieId", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.UserMovieRanks.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.UserMovieRanks.Add(this);
						this._movieId = value.movieId;
					}
					else
					{
						this._movieId = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TwitterUser_UserMovieRank", Storage="_TwitterUser", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public TwitterUser TwitterUser
		{
			get
			{
				return this._TwitterUser.Entity;
			}
			set
			{
				TwitterUser previousValue = this._TwitterUser.Entity;
				if (((previousValue != value) 
							|| (this._TwitterUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TwitterUser.Entity = null;
						previousValue.UserMovieRanks.Remove(this);
					}
					this._TwitterUser.Entity = value;
					if ((value != null))
					{
						value.UserMovieRanks.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("TwitterUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
